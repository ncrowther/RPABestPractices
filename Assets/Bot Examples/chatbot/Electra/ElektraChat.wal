
	{T∂‡§˜Gì!0ÙzG‹˚Kimport --name ElektraChatBotCards --type "File" --content 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 --extension ".xlsx"
defVar --name language --type Language
defVar --name excel --type Excel
defVar --name excelTableButtons --type DataTable
defVar --name createdCards --type List --innertype CardItem
defVar --name selectedOption --type String
defVar --name result --type Boolean
defVar --name vPostCode --type String
defVar --name vYearlyConsumption --type String --value 4500
defVar --name vURL --type String
defVar --name vPrice --type String
defVar --name vProductName --type String
defVar --name vResponse --type String
defVar --name vAssetPath --type String
export --asset "${asset.ElektraChatBotCards}" vAssetPath=value
excelOpen --file "${vAssetPath}" excel=value
excelGetTable --file ${excel} --getfirstsheet  --fromrow 1 --fromcolumn 1 --torow 4 --tocolumn 10 --hasheaders  excelTableButtons=value
mapTableToCard --dataTable ${excelTableButtons} --titleColumn column0 --subtitleColumn 2 --textColumn 3 --thumbnailUrlColumn 4 --actionColumn 5 --actionValueColumn 6 createdCards=value
// Mapping of cards and specification of their actions.
mapTableToCardButtons --dataTable ${excelTableButtons} --cardItems ${createdCards} --buttonActionColumn 7 --buttonTextColumn 8 --buttonValueColumn 9
createLanguage --culture "en-US" language=value
botConnect --type "Chat" --language ${language} --autoanswer  --timeout "00:05:00"
	//botConnect --type "Chat" --language ${languageUS} --autoanswer --timeout 00:05:00
	botSay --language ${language} --text "Hello! My name is Electra. I\'m an IBM RPA bot to help you with electricity related topics."
	chatAskCarousel --text "I can help you with these:" --cards ${createdCards} --language ${language} --timeout "00:30:00" selectedOption=value result=success
	if --left "${selectedOption}" --operator "Equal_To" --right "Cheapest Contract"
		botAsk --noInputTimeout 00:00:15 --beep  --language ${language} --text "Type in your postcode please." --timeout "00:00:30" vPostCode=value
		botAsk --noInputTimeout 00:00:20 --beep  --language ${language} --text "And your estimated yearly electricity consumption in kilowatt-hours?" --timeout "00:00:45" vYearlyConsumption=value
		botSay --language ${language} --text "Got it. Postcode ${vPostCode} and yearly consumption ${vYearlyConsumption}. Let me check. Just a couple of seconds..."
		delay --timeout "00:00:02"
		executeScript --name GetCheapestElectricityContract --parameters "vPostCode=${vPostCode},vYearlyConsumption=${vYearlyConsumption}" --output "vURL=${vURL},vPrice=${vPrice},vProductName=${vProductName}"
		botSay --language ${language} --text "I\'m back. So, it seems like the cheapest product currently is ${vProductName} with annual cost of ${vPrice}.\r\n\r\nHere\'s the link to more detailed information: ${vURL}"
	endIf
	botAsk --noInputTimeout 00:00:30 --beep  --language ${language} --text "Anything else I can do for you?" --timeout "00:00:45" vResponse=value
	if --left "${vResponse}" --operator "Begins_With" --right No
		botSay --language ${language} --text "OK, bye!"
	endIf
	delay --timeout "00:00:02"
botDisconnect"	›Ì?9oêBÅTﬁÎ0æ˘p*	20.12.5.0